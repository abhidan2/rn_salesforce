
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook::react {

struct RNCTabViewItemsStruct {
  std::string key{};
  std::string title{};
  std::string sfSymbol{};
  std::string badge{};
  SharedColor activeTintColor{};
  bool hidden{false};
  std::string testID{};
  std::string role{};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RNCTabViewItemsStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_key = map.find("key");
  if (tmp_key != map.end()) {
    fromRawValue(context, tmp_key->second, result.key);
  }
  auto tmp_title = map.find("title");
  if (tmp_title != map.end()) {
    fromRawValue(context, tmp_title->second, result.title);
  }
  auto tmp_sfSymbol = map.find("sfSymbol");
  if (tmp_sfSymbol != map.end()) {
    fromRawValue(context, tmp_sfSymbol->second, result.sfSymbol);
  }
  auto tmp_badge = map.find("badge");
  if (tmp_badge != map.end()) {
    fromRawValue(context, tmp_badge->second, result.badge);
  }
  auto tmp_activeTintColor = map.find("activeTintColor");
  if (tmp_activeTintColor != map.end()) {
    fromRawValue(context, tmp_activeTintColor->second, result.activeTintColor);
  }
  auto tmp_hidden = map.find("hidden");
  if (tmp_hidden != map.end()) {
    fromRawValue(context, tmp_hidden->second, result.hidden);
  }
  auto tmp_testID = map.find("testID");
  if (tmp_testID != map.end()) {
    fromRawValue(context, tmp_testID->second, result.testID);
  }
  auto tmp_role = map.find("role");
  if (tmp_role != map.end()) {
    fromRawValue(context, tmp_role->second, result.role);
  }
}

static inline std::string toString(const RNCTabViewItemsStruct &value) {
  return "[Object RNCTabViewItemsStruct]";
}

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, std::vector<RNCTabViewItemsStruct> &result) {
  auto items = (std::vector<RawValue>)value;
  for (const auto &item : items) {
    RNCTabViewItemsStruct newItem;
    fromRawValue(context, item, newItem);
    result.emplace_back(newItem);
  }
}

class RNCTabViewProps final : public ViewProps {
 public:
  RNCTabViewProps() = default;
  RNCTabViewProps(const PropsParserContext& context, const RNCTabViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::vector<RNCTabViewItemsStruct> items{};
  std::string selectedPage{};
  std::vector<ImageSource> icons{};
  bool tabBarHidden{false};
  bool labeled{false};
  bool sidebarAdaptable{false};
  std::string scrollEdgeAppearance{};
  SharedColor barTintColor{};
  bool translucent{true};
  SharedColor rippleColor{};
  SharedColor activeTintColor{};
  SharedColor inactiveTintColor{};
  bool disablePageAnimations{false};
  SharedColor activeIndicatorColor{};
  bool hapticFeedbackEnabled{false};
  std::string minimizeBehavior{};
  std::string fontFamily{};
  std::string fontWeight{};
  int fontSize{0};
};

} // namespace facebook::react
